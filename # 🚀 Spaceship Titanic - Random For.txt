# ðŸš€ Spaceship Titanic - Random Forest Model

# === IMPORTS ===
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# === LOAD DATA ===
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')
sample_submission = pd.read_csv('sample_submission.csv')

# === FEATURE ENGINEERING ===
def split_cabin(df):
    df[['Deck','Num','Side']] = df['Cabin'].str.split('/', expand=True)
    return df

train = split_cabin(train)
test = split_cabin(test)

# === HANDLE MISSING VALUES ===
cat_cols = train.select_dtypes(include='object').columns.tolist()
num_cols = train.select_dtypes(include='number').columns.tolist()

# Remove target, PassengerId, and Name from cat_cols
cat_cols = [col for col in cat_cols if col not in ['Transported', 'PassengerId', 'Name']]

# Imputers
imputer_cat = SimpleImputer(strategy='most_frequent')
imputer_num = SimpleImputer(strategy='mean')

train[cat_cols] = imputer_cat.fit_transform(train[cat_cols])
train[num_cols] = imputer_num.fit_transform(train[num_cols])

test[cat_cols] = imputer_cat.transform(test[cat_cols])
test[num_cols] = imputer_num.transform(test[num_cols])

# === ENCODING ===
encoder = LabelEncoder()
for col in cat_cols:
    train[col] = encoder.fit_transform(train[col])
    test[col] = encoder.transform(test[col])

# Encode target
train['Transported'] = train['Transported'].astype(int)

# === SELECT FEATURES ===
features = ['HomePlanet', 'CryoSleep', 'Destination', 'Age',
            'VIP', 'RoomService', 'FoodCourt', 'ShoppingMall',
            'Spa', 'VRDeck', 'Deck', 'Num', 'Side']

X = train[features]
y = train['Transported']
X_test_final = test[features]

# === TRAIN / VALIDATION SPLIT ===
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# === RANDOM FOREST MODEL ===
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# === VALIDATION EVALUATION ===
y_pred = rf.predict(X_val)
print("Accuracy:", accuracy_score(y_val, y_pred))
print(confusion_matrix(y_val, y_pred))
print(classification_report(y_val, y_pred))

# === FEATURE IMPORTANCE PLOT (for XAI slide) ===
importances = rf.feature_importances_
feat_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feat_df = feat_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feat_df)
plt.title("Random Forest Feature Importance")
plt.show()

# === PREDICTION & SUBMISSION ===
predictions = rf.predict(X_test_final)
submission = pd.DataFrame({
    'PassengerId': test['PassengerId'],
    'Transported': predictions.astype(bool)
})
submission.to_csv('submission_rf.csv', index=False)
